// SOLVED RECURSIVELY USING DP.
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll table[1000][1000];
long long helper(ll arr[],ll n,ll val)
{
    if(val==0)
        return 1;

    if(n==0||val<0) return 0;
    if(table[n][val]>0) return table[n][val];
    ll a=helper(arr,n,val-arr[0]); //TAKING THE ARR[0] VALUE INTO CONSIDERATION SO ARR+1 IS DONE AND N CHANGES TO N-1
    ll b=helper(arr+1,n-1,val);    // NOT TAKING ARR[0] INTO CONSIDERATION .
    table[n][val]=a+b;
    return a+b;
}
int main()
{
   ll t;
   cin>>t;
   while(t--)
   {
       ll n;
       cin>>n;
       ll arr[n];
       for(int i=0;i<n;i++) cin>>arr[i];
       for(int i=0;i<1000;i++)
       {
           for(int j=0;j<1000;j++)
           {
               table[i][j]=-1;
           }
       }
       ll val;
       cin>>val;
       long long ans=helper(arr,n,val);
       cout<<ans<<endl;
   }
    return 0;
}


----------------------------------------------------  OR ---------------------------------------------------------------------------------
 BEST SOLUTION OF COIN CHANGE  PROBLEM :)
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int main() {                 //SPACE OPTIMIZED HAI 
	//code
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    int arr[n];
	   
	    for(int i=0;i<n;i++) cin>>arr[i];
	    int money;
	    cin>>money;
	     int dp[money+1]={0};
	     dp[0]=1;
	    for(int i=0;i<n;i++)           //  Pehle ek ek coin le ke answer nikalo for sum of money then incremental model se u usme aur                                   //coin ke aa jaan se answer change hoga ,FINALLY SAARE COIN KA OPERATION KARNE KE BAAD JO ANSWER HOGA                                   //THAT WILL BE OUR ANSWER. 
	    {
	        for(int j=arr[i];j<=money;j++)
	        {
	            dp[j]=dp[j]+dp[j-arr[i]];
	        }
	    }
	    cout<<dp[money]<<endl;
	}
	return 0;
}
